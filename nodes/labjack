#!/usr/bin/env python

from __future__ import print_function

import os
import sys

import rospy

from labjack import stream_to_csv


def main():
    rospy.init_node('labjack')

    param_ns = 'labjack/'
    input_channels = rospy.get_param(param_ns + 'input_channels', [0])
    resolution_index = rospy.get_param(param_ns + 'resolution_index', 0)
    time_col = rospy.get_param(param_ns + 'time_col', True)
    input_channel_names = rospy.get_param(param_ns + 'input_channel_names',
        None
    )
    if input_channel_names is not None:
        # Since ROS requires dict keys to be str, but stream_to_csv expects
        # these keys to be int.
        input_channel_names = {
            int(k): v for k, v in input_channel_names.items()
        }

    duration_s = rospy.get_param(param_ns + 'duration_s', None)

    csv_path = rospy.get_param(param_ns + 'csv_filename', 'labjack.csv')

    csv_dir_rosparam = rospy.get_param(param_ns + 'csv_dir_rosparam', None)

    if csv_dir_rosparam is not None:
        #csv_dir = rospy.get_param(csv_dir_rosparam)
        sleep_interval_s = 1.0
        timeout_s = 45.0
        total_slept_s = 0.0
        while True:
            try:
                csv_dir = rospy.get_param(csv_dir_rosparam)
                break
            except KeyError:
                rospy.sleep(sleep_interval_s)
                total_slept_s += sleep_interval_s
                if total_slept_s >= timeout_s:
                    rospy.logfatal(('timeout ({:.1f}s) reached without ROS '
                        'param {} becoming available').format(
                        timeout_s, csv_dir_rosparam
                    ))
                    sys.exit()

        if csv_dir is not None:
            #assert os.path.isdir(csv_dir)
            # since something needs to make this path in the nagel.py
            # stimuli_only:=True pid:=True case...
            if not os.path.exists(csv_dir):
                os.mkdir(csv_dir)

            csv_path = os.path.join(csv_dir, csv_path)

    stream_to_csv(csv_path, duration_s=duration_s,
        input_channels=input_channels, resolution_index=resolution_index,
        input_channel_names=input_channel_names, time_col=time_col
    )


if __name__ == '__main__':
    main()

